# The API is needed for the load balancer health checks. Access to the proper
# API is prevented by nginx.
[api]
enabled = true
address = "0.0.0.0:8000"

# Collect internal Vector metrics, useful for debugging Vector issues in prod.
[sources.self]
type = "internal_metrics"

# Receive log messages from Heroku applications, using Heroku's Logplex system.
[sources.heroku]
type = "heroku_logs"
address = "0.0.0.0:8001"
encoding = "text"
query_parameters = ["app_name"]

# Publish all the collected metrics as a Prometheus exporter.
[sinks.prometheus]
type = "prometheus_exporter"
inputs = ["self", "heroku-postgres", "ingested-metrics", "heroku-log-error"]
address = "0.0.0.0:8002"
# Long flush period needed due to Heroku Postgres's log frequency:
flush_period_secs = 600

###############################
#   Heroku Postgres metrics   #
###############################

# Heroku Postgres only outputs its metrics as a single log line roughly every 4
# to 5 minutes. The transform uses a custom Lua script to extract the metrics
# from the log line and emit separate Vector metrics for each extracted metric.
#
# A filter is used before the Lua script to quickly discard extra log lines.

[transforms.heroku-postgres-filter]
type = "filter"
inputs = ["heroku"]
condition = 'starts_with(.message, "source=HEROKU_POSTGRES") ?? false'

[transforms.heroku-postgres]
type = "lua"
version = "2"
inputs = ["heroku-postgres-filter"]
hooks.process = '''
function (event, emit)
    addon = string.match(event.log.message, "addon=([%w-]+)")

    for key, value in event.log.message:gmatch("sample#([%w-]+)=([^ ]+)") do
        multiply = 1

        -- Some samples are suffixed with "bytes", strip that
        value = value:gsub("bytes$", "")

        -- Some samples are suffixed with "kB", strip that and multiply by 1024
        without_kb = value:gsub("kB$", "")
        if without_kb ~= value then
            value = without_kb
            multiply = multiply * 1024
        end

        emit({
            ["metric"] = {
                ["gauge"] = {
                    ["value"] = tonumber(value) * multiply,
                },
                ["kind"] = "absolute",
                ["name"] = key:gsub("-", "_"),
                ["namespace"] = "heroku_postgres",
                ["tags"] = {
                    ["addon"] = addon,
                },
            }
        })
    end
end
'''

########################
#   Ingested metrics   #
########################

# Since it's not possible to point Prometheus to the individual Heroku dynos we
# changed the crates.io application to periodically print its metrics in the
# logs, relying on Vector to catch and expose them.
#
# The metrics line is prefixed with "crates-io-heroku-metrics:ingest" and
# contains the base64-encoded json-encoded metrics, formatted according to
# Vector's data model. After decoding the metrics from the log line the Lua
# transform enriches each metric with the app and process name, and emits each
# metric as an individual event.

[transforms.ingested-metrics-filter]
type = "filter"
inputs = ["heroku"]
condition = 'starts_with(.message, "crates-io-heroku-metrics:ingest ") ?? false'

[transforms.ingested-metrics-decode]
type = "remap"
inputs = ["ingested-metrics-filter"]
source = '.decoded = parse_json!(decode_base64!(replace!(.message, "crates-io-heroku-metrics:ingest ", "")))'

[transforms.ingested-metrics]
type = "lua"
version = "2"
inputs = ["ingested-metrics-decode"]
hooks.process = '''
function (event, emit)
    for _, metric in ipairs(event.log.decoded) do
        metric.metric.tags.app = event.log.app_name
        metric.metric.tags.process = event.log.proc_id
        emit(metric)
    end
end
'''

##########################
#   Heroku Log Metrics   #
##########################

# Heroku platform and application errors use a common `at=error ` prefix for
# easy log ingestion.

[transforms.heroku-log-error-filter]
type = "filter"
inputs = ["heroku"]
condition = 'starts_with(.message, "at=error ") ?? false'

[transforms.heroku-log-error]
type = "lua"
version = "2"
inputs = ["heroku-log-error-filter"]
hooks.process = '''
function (event, emit)
    emit({
        ["metric"] = {
            ["counter"] = {
                ["value"] = 1,
            },
            ["kind"] = "absolute",
            ["name"] = "error",
            ["namespace"] = "heroku_logs",
        }
    })

    for key, value in event.log.message:gmatch("(code|method|mod|status)=([^ ]+)") do
        emit({
            ["metric"] = {
                ["counter"] = {
                    ["value"] = 1,
                },
                ["kind"] = "absolute",
                ["name"] = key,
                ["namespace"] = "heroku_logs",
                ["tags"] = {
                    [key] = value,
                },
            }
        })
    end
end
'''
